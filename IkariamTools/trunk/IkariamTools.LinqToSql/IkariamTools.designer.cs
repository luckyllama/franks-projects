#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IkariamTools.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ikariam")]
	public partial class IkariamToolsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCombatReport(CombatReport instance);
    partial void UpdateCombatReport(CombatReport instance);
    partial void DeleteCombatReport(CombatReport instance);
    partial void InsertSpyReport(SpyReport instance);
    partial void UpdateSpyReport(SpyReport instance);
    partial void DeleteSpyReport(SpyReport instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    #endregion
		
		public IkariamToolsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IkariamToolsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IkariamToolsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IkariamToolsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CombatReport> CombatReports
		{
			get
			{
				return this.GetTable<CombatReport>();
			}
		}
		
		public System.Data.Linq.Table<SpyReport> SpyReports
		{
			get
			{
				return this.GetTable<SpyReport>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
	}
	
	[Table(Name="dbo.CombatReports")]
	public partial class CombatReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CityId;
		
		private System.Nullable<int> _WoodLooted;
		
		private System.Nullable<int> _WineLooted;
		
		private System.Nullable<int> _MarbleLooted;
		
		private System.Nullable<int> _CrystalLooted;
		
		private System.Nullable<int> _SulphurLooted;
		
		private System.DateTime _Date;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWoodLootedChanging(System.Nullable<int> value);
    partial void OnWoodLootedChanged();
    partial void OnWineLootedChanging(System.Nullable<int> value);
    partial void OnWineLootedChanged();
    partial void OnMarbleLootedChanging(System.Nullable<int> value);
    partial void OnMarbleLootedChanged();
    partial void OnCrystalLootedChanging(System.Nullable<int> value);
    partial void OnCrystalLootedChanged();
    partial void OnSulphurLootedChanging(System.Nullable<int> value);
    partial void OnSulphurLootedChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public CombatReport()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[Column(Storage="_WoodLooted", DbType="Int")]
		public System.Nullable<int> WoodLooted
		{
			get
			{
				return this._WoodLooted;
			}
			set
			{
				if ((this._WoodLooted != value))
				{
					this.OnWoodLootedChanging(value);
					this.SendPropertyChanging();
					this._WoodLooted = value;
					this.SendPropertyChanged("WoodLooted");
					this.OnWoodLootedChanged();
				}
			}
		}
		
		[Column(Storage="_WineLooted", DbType="Int")]
		public System.Nullable<int> WineLooted
		{
			get
			{
				return this._WineLooted;
			}
			set
			{
				if ((this._WineLooted != value))
				{
					this.OnWineLootedChanging(value);
					this.SendPropertyChanging();
					this._WineLooted = value;
					this.SendPropertyChanged("WineLooted");
					this.OnWineLootedChanged();
				}
			}
		}
		
		[Column(Storage="_MarbleLooted", DbType="Int")]
		public System.Nullable<int> MarbleLooted
		{
			get
			{
				return this._MarbleLooted;
			}
			set
			{
				if ((this._MarbleLooted != value))
				{
					this.OnMarbleLootedChanging(value);
					this.SendPropertyChanging();
					this._MarbleLooted = value;
					this.SendPropertyChanged("MarbleLooted");
					this.OnMarbleLootedChanged();
				}
			}
		}
		
		[Column(Storage="_CrystalLooted", DbType="Int")]
		public System.Nullable<int> CrystalLooted
		{
			get
			{
				return this._CrystalLooted;
			}
			set
			{
				if ((this._CrystalLooted != value))
				{
					this.OnCrystalLootedChanging(value);
					this.SendPropertyChanging();
					this._CrystalLooted = value;
					this.SendPropertyChanged("CrystalLooted");
					this.OnCrystalLootedChanged();
				}
			}
		}
		
		[Column(Storage="_SulphurLooted", DbType="Int")]
		public System.Nullable<int> SulphurLooted
		{
			get
			{
				return this._SulphurLooted;
			}
			set
			{
				if ((this._SulphurLooted != value))
				{
					this.OnSulphurLootedChanging(value);
					this.SendPropertyChanging();
					this._SulphurLooted = value;
					this.SendPropertyChanged("SulphurLooted");
					this.OnSulphurLootedChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="City1_CombatReport", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.CombatReports.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.CombatReports.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SpyReports")]
	public partial class SpyReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CityId;
		
		private int _WoodQuantity;
		
		private int _WineQuantity;
		
		private int _MarbleQuantity;
		
		private int _CrystalQuantity;
		
		private int _SulphurQuantity;
		
		private System.DateTime _Date;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWoodQuantityChanging(int value);
    partial void OnWoodQuantityChanged();
    partial void OnWineQuantityChanging(int value);
    partial void OnWineQuantityChanged();
    partial void OnMarbleQuantityChanging(int value);
    partial void OnMarbleQuantityChanged();
    partial void OnCrystalQuantityChanging(int value);
    partial void OnCrystalQuantityChanged();
    partial void OnSulphurQuantityChanging(int value);
    partial void OnSulphurQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public SpyReport()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[Column(Storage="_WoodQuantity", DbType="Int NOT NULL")]
		public int WoodQuantity
		{
			get
			{
				return this._WoodQuantity;
			}
			set
			{
				if ((this._WoodQuantity != value))
				{
					this.OnWoodQuantityChanging(value);
					this.SendPropertyChanging();
					this._WoodQuantity = value;
					this.SendPropertyChanged("WoodQuantity");
					this.OnWoodQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_WineQuantity", DbType="Int NOT NULL")]
		public int WineQuantity
		{
			get
			{
				return this._WineQuantity;
			}
			set
			{
				if ((this._WineQuantity != value))
				{
					this.OnWineQuantityChanging(value);
					this.SendPropertyChanging();
					this._WineQuantity = value;
					this.SendPropertyChanged("WineQuantity");
					this.OnWineQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_MarbleQuantity", DbType="Int NOT NULL")]
		public int MarbleQuantity
		{
			get
			{
				return this._MarbleQuantity;
			}
			set
			{
				if ((this._MarbleQuantity != value))
				{
					this.OnMarbleQuantityChanging(value);
					this.SendPropertyChanging();
					this._MarbleQuantity = value;
					this.SendPropertyChanged("MarbleQuantity");
					this.OnMarbleQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_CrystalQuantity", DbType="Int NOT NULL")]
		public int CrystalQuantity
		{
			get
			{
				return this._CrystalQuantity;
			}
			set
			{
				if ((this._CrystalQuantity != value))
				{
					this.OnCrystalQuantityChanging(value);
					this.SendPropertyChanging();
					this._CrystalQuantity = value;
					this.SendPropertyChanged("CrystalQuantity");
					this.OnCrystalQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SulphurQuantity", DbType="Int NOT NULL")]
		public int SulphurQuantity
		{
			get
			{
				return this._SulphurQuantity;
			}
			set
			{
				if ((this._SulphurQuantity != value))
				{
					this.OnSulphurQuantityChanging(value);
					this.SendPropertyChanging();
					this._SulphurQuantity = value;
					this.SendPropertyChanged("SulphurQuantity");
					this.OnSulphurQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="City1_SpyReport", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.SpyReports.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.SpyReports.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlayerName;
		
		private System.Nullable<int> _TotalScore;
		
		private System.Nullable<int> _MilitaryScore;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnTotalScoreChanging(System.Nullable<int> value);
    partial void OnTotalScoreChanged();
    partial void OnMilitaryScoreChanging(System.Nullable<int> value);
    partial void OnMilitaryScoreChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Player()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerName", DbType="VarChar(55) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_TotalScore", DbType="Int")]
		public System.Nullable<int> TotalScore
		{
			get
			{
				return this._TotalScore;
			}
			set
			{
				if ((this._TotalScore != value))
				{
					this.OnTotalScoreChanging(value);
					this.SendPropertyChanging();
					this._TotalScore = value;
					this.SendPropertyChanged("TotalScore");
					this.OnTotalScoreChanged();
				}
			}
		}
		
		[Column(Storage="_MilitaryScore", DbType="Int")]
		public System.Nullable<int> MilitaryScore
		{
			get
			{
				return this._MilitaryScore;
			}
			set
			{
				if ((this._MilitaryScore != value))
				{
					this.OnMilitaryScoreChanging(value);
					this.SendPropertyChanging();
					this._MilitaryScore = value;
					this.SendPropertyChanged("MilitaryScore");
					this.OnMilitaryScoreChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Player_City1", Storage="_Cities", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[Table(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CityName;
		
		private System.Nullable<int> _PlayerId;
		
		private System.Nullable<byte> _X;
		
		private System.Nullable<byte> _Y;
		
		private string _ResourceType;
		
		private System.Nullable<byte> _Size;
		
		private System.Nullable<byte> _Wall;
		
		private System.Nullable<byte> _Warehouse;
		
		private System.Nullable<bool> _IsCapital;
		
		private string _Notes;
		
		private System.Nullable<int> _DeltaWood;
		
		private System.Nullable<int> _DeltaWine;
		
		private System.Nullable<int> _DeltaMarble;
		
		private System.Nullable<int> _DeltaCrystal;
		
		private System.Nullable<int> _DeltaSulphur;
		
		private System.Nullable<int> _IkariamId;
		
		private EntitySet<CombatReport> _CombatReports;
		
		private EntitySet<SpyReport> _SpyReports;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnPlayerIdChanging(System.Nullable<int> value);
    partial void OnPlayerIdChanged();
    partial void OnXChanging(System.Nullable<byte> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<byte> value);
    partial void OnYChanged();
    partial void OnResourceTypeChanging(string value);
    partial void OnResourceTypeChanged();
    partial void OnSizeChanging(System.Nullable<byte> value);
    partial void OnSizeChanged();
    partial void OnWallChanging(System.Nullable<byte> value);
    partial void OnWallChanged();
    partial void OnWarehouseChanging(System.Nullable<byte> value);
    partial void OnWarehouseChanged();
    partial void OnIsCapitalChanging(System.Nullable<bool> value);
    partial void OnIsCapitalChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnDeltaWoodChanging(System.Nullable<int> value);
    partial void OnDeltaWoodChanged();
    partial void OnDeltaWineChanging(System.Nullable<int> value);
    partial void OnDeltaWineChanged();
    partial void OnDeltaMarbleChanging(System.Nullable<int> value);
    partial void OnDeltaMarbleChanged();
    partial void OnDeltaCrystalChanging(System.Nullable<int> value);
    partial void OnDeltaCrystalChanged();
    partial void OnDeltaSulphurChanging(System.Nullable<int> value);
    partial void OnDeltaSulphurChanged();
    partial void OnIkariamIdChanging(System.Nullable<int> value);
    partial void OnIkariamIdChanged();
    #endregion
		
		public City()
		{
			this._CombatReports = new EntitySet<CombatReport>(new Action<CombatReport>(this.attach_CombatReports), new Action<CombatReport>(this.detach_CombatReports));
			this._SpyReports = new EntitySet<SpyReport>(new Action<SpyReport>(this.attach_SpyReports), new Action<SpyReport>(this.detach_SpyReports));
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CityName", DbType="VarChar(55) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerId", DbType="Int")]
		public System.Nullable<int> PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="TinyInt")]
		public System.Nullable<byte> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="TinyInt")]
		public System.Nullable<byte> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceType", DbType="VarChar(20)")]
		public string ResourceType
		{
			get
			{
				return this._ResourceType;
			}
			set
			{
				if ((this._ResourceType != value))
				{
					this.OnResourceTypeChanging(value);
					this.SendPropertyChanging();
					this._ResourceType = value;
					this.SendPropertyChanged("ResourceType");
					this.OnResourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="TinyInt")]
		public System.Nullable<byte> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Wall", DbType="TinyInt")]
		public System.Nullable<byte> Wall
		{
			get
			{
				return this._Wall;
			}
			set
			{
				if ((this._Wall != value))
				{
					this.OnWallChanging(value);
					this.SendPropertyChanging();
					this._Wall = value;
					this.SendPropertyChanged("Wall");
					this.OnWallChanged();
				}
			}
		}
		
		[Column(Storage="_Warehouse", DbType="TinyInt")]
		public System.Nullable<byte> Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				if ((this._Warehouse != value))
				{
					this.OnWarehouseChanging(value);
					this.SendPropertyChanging();
					this._Warehouse = value;
					this.SendPropertyChanged("Warehouse");
					this.OnWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_IsCapital", DbType="Bit")]
		public System.Nullable<bool> IsCapital
		{
			get
			{
				return this._IsCapital;
			}
			set
			{
				if ((this._IsCapital != value))
				{
					this.OnIsCapitalChanging(value);
					this.SendPropertyChanging();
					this._IsCapital = value;
					this.SendPropertyChanged("IsCapital");
					this.OnIsCapitalChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaWood", DbType="Int")]
		public System.Nullable<int> DeltaWood
		{
			get
			{
				return this._DeltaWood;
			}
			set
			{
				if ((this._DeltaWood != value))
				{
					this.OnDeltaWoodChanging(value);
					this.SendPropertyChanging();
					this._DeltaWood = value;
					this.SendPropertyChanged("DeltaWood");
					this.OnDeltaWoodChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaWine", DbType="Int")]
		public System.Nullable<int> DeltaWine
		{
			get
			{
				return this._DeltaWine;
			}
			set
			{
				if ((this._DeltaWine != value))
				{
					this.OnDeltaWineChanging(value);
					this.SendPropertyChanging();
					this._DeltaWine = value;
					this.SendPropertyChanged("DeltaWine");
					this.OnDeltaWineChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaMarble", DbType="Int")]
		public System.Nullable<int> DeltaMarble
		{
			get
			{
				return this._DeltaMarble;
			}
			set
			{
				if ((this._DeltaMarble != value))
				{
					this.OnDeltaMarbleChanging(value);
					this.SendPropertyChanging();
					this._DeltaMarble = value;
					this.SendPropertyChanged("DeltaMarble");
					this.OnDeltaMarbleChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaCrystal", DbType="Int")]
		public System.Nullable<int> DeltaCrystal
		{
			get
			{
				return this._DeltaCrystal;
			}
			set
			{
				if ((this._DeltaCrystal != value))
				{
					this.OnDeltaCrystalChanging(value);
					this.SendPropertyChanging();
					this._DeltaCrystal = value;
					this.SendPropertyChanged("DeltaCrystal");
					this.OnDeltaCrystalChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaSulphur", DbType="Int")]
		public System.Nullable<int> DeltaSulphur
		{
			get
			{
				return this._DeltaSulphur;
			}
			set
			{
				if ((this._DeltaSulphur != value))
				{
					this.OnDeltaSulphurChanging(value);
					this.SendPropertyChanging();
					this._DeltaSulphur = value;
					this.SendPropertyChanged("DeltaSulphur");
					this.OnDeltaSulphurChanged();
				}
			}
		}
		
		[Column(Storage="_IkariamId", DbType="Int")]
		public System.Nullable<int> IkariamId
		{
			get
			{
				return this._IkariamId;
			}
			set
			{
				if ((this._IkariamId != value))
				{
					this.OnIkariamIdChanging(value);
					this.SendPropertyChanging();
					this._IkariamId = value;
					this.SendPropertyChanged("IkariamId");
					this.OnIkariamIdChanged();
				}
			}
		}
		
		[Association(Name="City1_CombatReport", Storage="_CombatReports", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<CombatReport> CombatReports
		{
			get
			{
				return this._CombatReports;
			}
			set
			{
				this._CombatReports.Assign(value);
			}
		}
		
		[Association(Name="City1_SpyReport", Storage="_SpyReports", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<SpyReport> SpyReports
		{
			get
			{
				return this._SpyReports;
			}
			set
			{
				this._SpyReports.Assign(value);
			}
		}
		
		[Association(Name="Player_City1", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CombatReports(CombatReport entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_CombatReports(CombatReport entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_SpyReports(SpyReport entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_SpyReports(SpyReport entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
}
#pragma warning restore 1591
